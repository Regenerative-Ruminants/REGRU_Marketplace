# ---- Builder Stage ----
# Use the official Rust image as a builder.
# We use a specific recent version to get the latest features required by dependencies.
FROM rust:1.78 AS builder

# Set the working directory in the container.
WORKDIR /usr/src/app

# Copy the entire project into the container.
# This is necessary because the backend build depends on the autonomi-core crate.
COPY . .

# Build the backend in release mode.
# This will compile our Actix server into an optimized executable.
RUN cd src-backend && cargo build --release

# ---- Final Stage ----
# Use a slim Debian image for the final container.
FROM gcr.io/distroless/cc-debian12

# Set the working directory.
WORKDIR /app

# Copy the compiled backend executable from the builder stage.
# The executable is located in the target/release directory.
COPY --from=builder /usr/src/app/src-backend/target/release/src-backend .

# Copy the static frontend assets from the local filesystem.
# These were generated by `npm run build` and are in the `dist` directory.
COPY ./dist ./dist

# Copy the .env.example file from its correct location.
# In a real deployment, you would populate a .env file.
COPY ./src-backend/.env.example ./.env

# Set environment variables.
# The backend will listen on all interfaces (0.0.0.0) inside the container.
ENV APP_HOST=0.0.0.0
ENV APP_PORT=8000
# You would set your SECRET_KEY in a real deployment environment.
# ENV SECRET_KEY="your_secret_key_here"

# Expose the port the app runs on.
EXPOSE 8000

# The command to run when the container starts.
# This starts our Actix web server.
CMD ["./src-backend"] 