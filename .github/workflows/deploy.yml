name: Deploy to DigitalOcean

on:
  workflow_dispatch: # Allows manual triggering of the workflow
  push:
    branches:
      - web-deployment # This workflow runs on pushes to the web-deployment branch for testing

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js and build frontend
        uses: actions/setup-node@v4
        with:
          node-version: 20 # Specify the Node.js version you use
      - run: npm install
      - run: npm run build # This creates the ./dist directory

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: ${{ secrets.DO_REGISTRY_USER }}
          password: ${{ secrets.DO_REGISTRY_PASSWORD }}

      - name: Force remove .dockerignore
        run: rm -f .dockerignore

      - name: Inspect build context
        run: |
          echo "Listing top-level files:"
          ls -l
          echo "Listing src-backend files:"
          ls -l src-backend
          echo "Listing autonomi-core files:"
          ls -l crates/autonomi-core

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: registry.digitalocean.com/regru-marketplace/app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_DROPLET_HOST }}
          username: ${{ secrets.DO_DROPLET_USER }}
          key: ${{ secrets.DO_DROPLET_KEY }}
          script: |
            # Update package list and install Docker if not present
            apt-get update
            apt-get install -y docker.io

            # Find and kill any process using port 80
            fuser -k 80/tcp || true

            # Pull the latest image from the registry
            docker pull registry.digitalocean.com/regru-marketplace/app:latest
            
            # Stop and remove the old container if it exists
            docker stop regru-app || true
            docker rm regru-app || true
            
            # Run the new container
            docker run -d -p 80:8000 --name regru-app \
              -e SECRET_KEY="${{ secrets.SECRET_KEY }}" \
              registry.digitalocean.com/regru-marketplace/app:latest 